// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/user_repository.go -package test
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	ent "github.com/1111mp/gin-app/ent"
	dto "github.com/1111mp/gin-app/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInter is a mock of UserRepositoryInter interface.
type MockUserRepositoryInter struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterMockRecorder is the mock recorder for MockUserRepositoryInter.
type MockUserRepositoryInterMockRecorder struct {
	mock *MockUserRepositoryInter
}

// NewMockUserRepositoryInter creates a new mock instance.
func NewMockUserRepositoryInter(ctrl *gomock.Controller) *MockUserRepositoryInter {
	mock := &MockUserRepositoryInter{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInter) EXPECT() *MockUserRepositoryInterMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockUserRepositoryInter) CreateOne(ctx context.Context, arg1 dto.UserCreateOneDto) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, arg1)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockUserRepositoryInterMockRecorder) CreateOne(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockUserRepositoryInter)(nil).CreateOne), ctx, arg1)
}

// GetById mocks base method.
func (m *MockUserRepositoryInter) GetById(ctx context.Context, id int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryInterMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepositoryInter)(nil).GetById), ctx, id)
}
