// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source ./pkg/jwt/jwt.go -package test
//

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"

	jwt "github.com/1111mp/gin-app/pkg/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTManagerInterface is a mock of JWTManagerInterface interface.
type MockJWTManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockJWTManagerInterfaceMockRecorder is the mock recorder for MockJWTManagerInterface.
type MockJWTManagerInterfaceMockRecorder struct {
	mock *MockJWTManagerInterface
}

// NewMockJWTManagerInterface creates a new mock instance.
func NewMockJWTManagerInterface(ctrl *gomock.Controller) *MockJWTManagerInterface {
	mock := &MockJWTManagerInterface{ctrl: ctrl}
	mock.recorder = &MockJWTManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManagerInterface) EXPECT() *MockJWTManagerInterfaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWTManagerInterface) GenerateToken(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTManagerInterfaceMockRecorder) GenerateToken(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWTManagerInterface)(nil).GenerateToken), userId)
}

// ParseToken mocks base method.
func (m *MockJWTManagerInterface) ParseToken(t string) (*jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", t)
	ret0, _ := ret[0].(*jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockJWTManagerInterfaceMockRecorder) ParseToken(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockJWTManagerInterface)(nil).ParseToken), t)
}
