// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/user_repository.go -package service_test
//

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	ent "github.com/1111mp/gin-app/ent"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockUserRepository) CreateOne() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOne")
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockUserRepositoryMockRecorder) CreateOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockUserRepository)(nil).CreateOne))
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(ctx context.Context, id int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), ctx, id)
}
