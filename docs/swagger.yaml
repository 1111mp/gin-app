definitions:
  dto.CreateOneUserDto:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  ent.PostEntity:
    properties:
      category:
        $ref: '#/definitions/post.Category'
      content:
        type: string
      createTime:
        type: string
      id:
        type: integer
      title:
        type: string
      updateTime:
        type: string
    type: object
  ent.UserEntity:
    properties:
      createTime:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        items:
          $ref: '#/definitions/ent.PostEntity'
        type: array
      updateTime:
        type: string
    type: object
  errors.APIError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  post.Category:
    enum:
    - Feed
    - Story
    type: string
    x-enum-varnames:
    - CategoryFeed
    - CategoryStory
  response.UserAPIResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: success
        type: string
      payload:
        $ref: '#/definitions/ent.UserEntity'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server Petstore server.
  title: Go Clean Template API
  version: "1.0"
paths:
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      operationId: CreateOne
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOneUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            $ref: '#/definitions/response.UserAPIResponse'
        "400":
          description: Bad request (invalid params)
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Create a new user
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user information by given user ID
      operationId: getUserById
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/response.UserAPIResponse'
        "400":
          description: Bad request (invalid ID)
          schema:
            $ref: '#/definitions/errors.APIError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Get user by ID
      tags:
      - Users
swagger: "2.0"
