// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/1111mp/gin-app/ent/accesstoken"
	"github.com/1111mp/gin-app/ent/predicate"
)

// AccessTokenUpdate is the builder for updating AccessToken entities.
type AccessTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AccessTokenMutation
}

// Where appends a list predicates to the AccessTokenUpdate builder.
func (_u *AccessTokenUpdate) Where(ps ...predicate.AccessToken) *AccessTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *AccessTokenUpdate) SetUpdateTime(v time.Time) *AccessTokenUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *AccessTokenUpdate) SetName(v string) *AccessTokenUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AccessTokenUpdate) SetNillableName(v *string) *AccessTokenUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *AccessTokenUpdate) SetValue(v string) *AccessTokenUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AccessTokenUpdate) SetNillableValue(v *string) *AccessTokenUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetOwner sets the "owner" field.
func (_u *AccessTokenUpdate) SetOwner(v int) *AccessTokenUpdate {
	_u.mutation.ResetOwner()
	_u.mutation.SetOwner(v)
	return _u
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (_u *AccessTokenUpdate) SetNillableOwner(v *int) *AccessTokenUpdate {
	if v != nil {
		_u.SetOwner(*v)
	}
	return _u
}

// AddOwner adds value to the "owner" field.
func (_u *AccessTokenUpdate) AddOwner(v int) *AccessTokenUpdate {
	_u.mutation.AddOwner(v)
	return _u
}

// SetExpireTime sets the "expire_time" field.
func (_u *AccessTokenUpdate) SetExpireTime(v int64) *AccessTokenUpdate {
	_u.mutation.ResetExpireTime()
	_u.mutation.SetExpireTime(v)
	return _u
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (_u *AccessTokenUpdate) SetNillableExpireTime(v *int64) *AccessTokenUpdate {
	if v != nil {
		_u.SetExpireTime(*v)
	}
	return _u
}

// AddExpireTime adds value to the "expire_time" field.
func (_u *AccessTokenUpdate) AddExpireTime(v int64) *AccessTokenUpdate {
	_u.mutation.AddExpireTime(v)
	return _u
}

// SetCreator sets the "creator" field.
func (_u *AccessTokenUpdate) SetCreator(v int) *AccessTokenUpdate {
	_u.mutation.ResetCreator()
	_u.mutation.SetCreator(v)
	return _u
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (_u *AccessTokenUpdate) SetNillableCreator(v *int) *AccessTokenUpdate {
	if v != nil {
		_u.SetCreator(*v)
	}
	return _u
}

// AddCreator adds value to the "creator" field.
func (_u *AccessTokenUpdate) AddCreator(v int) *AccessTokenUpdate {
	_u.mutation.AddCreator(v)
	return _u
}

// Mutation returns the AccessTokenMutation object of the builder.
func (_u *AccessTokenUpdate) Mutation() *AccessTokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AccessTokenUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AccessTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AccessTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AccessTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AccessTokenUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := accesstoken.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *AccessTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accesstoken.Table, accesstoken.Columns, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(accesstoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(accesstoken.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(accesstoken.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Owner(); ok {
		_spec.SetField(accesstoken.FieldOwner, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOwner(); ok {
		_spec.AddField(accesstoken.FieldOwner, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExpireTime(); ok {
		_spec.SetField(accesstoken.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedExpireTime(); ok {
		_spec.AddField(accesstoken.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Creator(); ok {
		_spec.SetField(accesstoken.FieldCreator, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreator(); ok {
		_spec.AddField(accesstoken.FieldCreator, field.TypeInt, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AccessTokenUpdateOne is the builder for updating a single AccessToken entity.
type AccessTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessTokenMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *AccessTokenUpdateOne) SetUpdateTime(v time.Time) *AccessTokenUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *AccessTokenUpdateOne) SetName(v string) *AccessTokenUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AccessTokenUpdateOne) SetNillableName(v *string) *AccessTokenUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *AccessTokenUpdateOne) SetValue(v string) *AccessTokenUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AccessTokenUpdateOne) SetNillableValue(v *string) *AccessTokenUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetOwner sets the "owner" field.
func (_u *AccessTokenUpdateOne) SetOwner(v int) *AccessTokenUpdateOne {
	_u.mutation.ResetOwner()
	_u.mutation.SetOwner(v)
	return _u
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (_u *AccessTokenUpdateOne) SetNillableOwner(v *int) *AccessTokenUpdateOne {
	if v != nil {
		_u.SetOwner(*v)
	}
	return _u
}

// AddOwner adds value to the "owner" field.
func (_u *AccessTokenUpdateOne) AddOwner(v int) *AccessTokenUpdateOne {
	_u.mutation.AddOwner(v)
	return _u
}

// SetExpireTime sets the "expire_time" field.
func (_u *AccessTokenUpdateOne) SetExpireTime(v int64) *AccessTokenUpdateOne {
	_u.mutation.ResetExpireTime()
	_u.mutation.SetExpireTime(v)
	return _u
}

// SetNillableExpireTime sets the "expire_time" field if the given value is not nil.
func (_u *AccessTokenUpdateOne) SetNillableExpireTime(v *int64) *AccessTokenUpdateOne {
	if v != nil {
		_u.SetExpireTime(*v)
	}
	return _u
}

// AddExpireTime adds value to the "expire_time" field.
func (_u *AccessTokenUpdateOne) AddExpireTime(v int64) *AccessTokenUpdateOne {
	_u.mutation.AddExpireTime(v)
	return _u
}

// SetCreator sets the "creator" field.
func (_u *AccessTokenUpdateOne) SetCreator(v int) *AccessTokenUpdateOne {
	_u.mutation.ResetCreator()
	_u.mutation.SetCreator(v)
	return _u
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (_u *AccessTokenUpdateOne) SetNillableCreator(v *int) *AccessTokenUpdateOne {
	if v != nil {
		_u.SetCreator(*v)
	}
	return _u
}

// AddCreator adds value to the "creator" field.
func (_u *AccessTokenUpdateOne) AddCreator(v int) *AccessTokenUpdateOne {
	_u.mutation.AddCreator(v)
	return _u
}

// Mutation returns the AccessTokenMutation object of the builder.
func (_u *AccessTokenUpdateOne) Mutation() *AccessTokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the AccessTokenUpdate builder.
func (_u *AccessTokenUpdateOne) Where(ps ...predicate.AccessToken) *AccessTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AccessTokenUpdateOne) Select(field string, fields ...string) *AccessTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AccessToken entity.
func (_u *AccessTokenUpdateOne) Save(ctx context.Context) (*AccessToken, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AccessTokenUpdateOne) SaveX(ctx context.Context) *AccessToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AccessTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AccessTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AccessTokenUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := accesstoken.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *AccessTokenUpdateOne) sqlSave(ctx context.Context) (_node *AccessToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(accesstoken.Table, accesstoken.Columns, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesstoken.FieldID)
		for _, f := range fields {
			if !accesstoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(accesstoken.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(accesstoken.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(accesstoken.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Owner(); ok {
		_spec.SetField(accesstoken.FieldOwner, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOwner(); ok {
		_spec.AddField(accesstoken.FieldOwner, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ExpireTime(); ok {
		_spec.SetField(accesstoken.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedExpireTime(); ok {
		_spec.AddField(accesstoken.FieldExpireTime, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Creator(); ok {
		_spec.SetField(accesstoken.FieldCreator, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCreator(); ok {
		_spec.AddField(accesstoken.FieldCreator, field.TypeInt, value)
	}
	_node = &AccessToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
